// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0--rc1
// source: kadev-rk.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteKeyClient is the client API for RemoteKey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteKeyClient interface {
	KeySignalStream(ctx context.Context, opts ...grpc.CallOption) (RemoteKey_KeySignalStreamClient, error)
}

type remoteKeyClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteKeyClient(cc grpc.ClientConnInterface) RemoteKeyClient {
	return &remoteKeyClient{cc}
}

func (c *remoteKeyClient) KeySignalStream(ctx context.Context, opts ...grpc.CallOption) (RemoteKey_KeySignalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RemoteKey_ServiceDesc.Streams[0], "/rk.RemoteKey/KeySignalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteKeyKeySignalStreamClient{stream}
	return x, nil
}

type RemoteKey_KeySignalStreamClient interface {
	Send(*KeySignal) error
	CloseAndRecv() (*Void, error)
	grpc.ClientStream
}

type remoteKeyKeySignalStreamClient struct {
	grpc.ClientStream
}

func (x *remoteKeyKeySignalStreamClient) Send(m *KeySignal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteKeyKeySignalStreamClient) CloseAndRecv() (*Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteKeyServer is the server API for RemoteKey service.
// All implementations must embed UnimplementedRemoteKeyServer
// for forward compatibility
type RemoteKeyServer interface {
	KeySignalStream(RemoteKey_KeySignalStreamServer) error
	mustEmbedUnimplementedRemoteKeyServer()
}

// UnimplementedRemoteKeyServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteKeyServer struct {
}

func (UnimplementedRemoteKeyServer) KeySignalStream(RemoteKey_KeySignalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method KeySignalStream not implemented")
}
func (UnimplementedRemoteKeyServer) mustEmbedUnimplementedRemoteKeyServer() {}

// UnsafeRemoteKeyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteKeyServer will
// result in compilation errors.
type UnsafeRemoteKeyServer interface {
	mustEmbedUnimplementedRemoteKeyServer()
}

func RegisterRemoteKeyServer(s grpc.ServiceRegistrar, srv RemoteKeyServer) {
	s.RegisterService(&RemoteKey_ServiceDesc, srv)
}

func _RemoteKey_KeySignalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteKeyServer).KeySignalStream(&remoteKeyKeySignalStreamServer{stream})
}

type RemoteKey_KeySignalStreamServer interface {
	SendAndClose(*Void) error
	Recv() (*KeySignal, error)
	grpc.ServerStream
}

type remoteKeyKeySignalStreamServer struct {
	grpc.ServerStream
}

func (x *remoteKeyKeySignalStreamServer) SendAndClose(m *Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteKeyKeySignalStreamServer) Recv() (*KeySignal, error) {
	m := new(KeySignal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteKey_ServiceDesc is the grpc.ServiceDesc for RemoteKey service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteKey_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rk.RemoteKey",
	HandlerType: (*RemoteKeyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeySignalStream",
			Handler:       _RemoteKey_KeySignalStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "kadev-rk.proto",
}
